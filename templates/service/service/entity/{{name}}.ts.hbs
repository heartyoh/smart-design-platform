import {
  CreateDateColumn,
  UpdateDateColumn,
  Entity,
  Index,
  Column,
  RelationId,
  ManyToOne,
  PrimaryGeneratedColumn
} from 'typeorm'
import { ObjectType, Field, Int, ID, registerEnumType } from 'type-graphql'

import { Domain } from '@things-factory/shell'
import { User } from '@things-factory/auth-base'

export enum {{pascalCase name}}Status {
  STATUS_A = 'STATUS_A',
  STATUS_B = 'STATUS_B'
}

registerEnumType({{pascalCase name}}Status, {
  name: '{{pascalCase name}}Status',
  description: 'state enumeration of a {{camelCase name}}'
})

@Entity()
@Index('ix_{{snakeCase name}}_0', ({{camelCase name}}: {{pascalCase name}}) => [{{camelCase name}}.domain, {{camelCase name}}.name], { unique: true })
@ObjectType({ description: 'Entity for {{pascalCase name}}' })
export class {{pascalCase name}} {
  @PrimaryGeneratedColumn('uuid')
  @Field(type => ID)
  readonly id: string

  @ManyToOne(type => Domain)
  @Field({ nullable: true })
  domain?: Domain

  @RelationId(({{camelCase name}}: {{pascalCase name}}) => {{camelCase name}}.domain)
  domainId?: string

  @Column()
  @Field()
  name: string

  @Column({
    nullable: true
  })
  @Field({ nullable: true })
  description?: string

  @Column({
    nullable: true
  })
  @Field({ nullable: true })
  active?: boolean

  @Column({
    nullable: true
  })
  @Field({ nullable: true })
  state?: {{pascalCase name}}Status

  @Column({
    nullable: true
  })
  @Field({ nullable: true })
  params?: string

  @CreateDateColumn()
  @Field({ nullable: true })
  createdAt?: Date

  @UpdateDateColumn()
  @Field({ nullable: true })
  updatedAt?: Date

  @ManyToOne(type => User, {
    nullable: true
  })
  @Field({ nullable: true })
  creator?: User

  @RelationId(({{camelCase name}}: {{pascalCase name}}) => {{camelCase name}}.creator)
  creatorId?: string

  @ManyToOne(type => User, {
    nullable: true
  })
  @Field({ nullable: true })
  updater?: User

  @RelationId(({{camelCase name}}: {{pascalCase name}}) => {{camelCase name}}.creator)
  updaterId?: string
}
