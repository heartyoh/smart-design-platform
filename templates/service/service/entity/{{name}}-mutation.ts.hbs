import { Resolver, Mutation, Arg, Ctx, Directive } from 'type-graphql'
import { getRepository, In } from 'typeorm'
import { {{pascalCase name}} } from './{{name}}'
import { New{{pascalCase name}}, {{pascalCase name}}Patch } from './{{name}}-type'

@Resolver({{pascalCase name}})
export class {{pascalCase name}}Mutation {
  @Directive('@transaction')
  @Mutation(returns => {{pascalCase name}}, { description: 'To create new {{pascalCase name}}' })
  async create{{pascalCase name}}(@Arg('{{camelCase name}}') {{camelCase name}}: New{{pascalCase name}}, @Ctx() context: any): Promise<{{pascalCase name}}> {
    const { domain, user, tx } = context.state

    return await tx.getRepository({{pascalCase name}}).save({
      ...{{camelCase name}},
      domain,
      creator: user,
      updater: user
    })
  }

  @Directive('@transaction')
  @Mutation(returns => {{pascalCase name}}, { description: 'To modify {{pascalCase name}} information' })
  async update{{pascalCase name}}(
    @Arg('id') id: string,
    @Arg('patch') patch: {{pascalCase name}}Patch,
    @Ctx() context: any
  ): Promise<{{pascalCase name}}> {
    const { domain, user, tx } = context.state

    const repository = tx.getRepository({{pascalCase name}})
    const {{camelCase name}} = await repository.findOne({
      where: { domain, id }
    })

    return await repository.save({
      ...{{camelCase name}},
      ...patch,
      updater: user
    })
  }

  @Directive('@transaction')
  @Mutation(returns => [{{pascalCase name}}], { description: "To modify multiple {{pluralPascalCase name}}' information" })
  async updateMultiple{{pascalCase name}}(
    @Arg('patches', type => [{{pascalCase name}}Patch]) patches: {{pascalCase name}}Patch[],
    @Ctx() context: any
  ): Promise<{{pascalCase name}}[]> {
    const { domain, user, tx } = context.state

    let results = []
    const _createRecords = patches.filter((patch: any) => patch.cuFlag.toUpperCase() === '+')
    const _updateRecords = patches.filter((patch: any) => patch.cuFlag.toUpperCase() === 'M')
    const {{camelCase name}}Repo = tx.getRepository({{pascalCase name}})

    if (_createRecords.length > 0) {
      for (let i = 0; i < _createRecords.length; i++) {
        const newRecord = _createRecords[i]

        const result = await {{camelCase name}}Repo.save({
          ...newRecord,
          domain,
          creator: user,
          updater: user
        })

        results.push({ ...result, cuFlag: '+' })
      }
    }

    if (_updateRecords.length > 0) {
      for (let i = 0; i < _updateRecords.length; i++) {
        const newRecord = _updateRecords[i]
        const {{camelCase name}} = await {{camelCase name}}Repo.findOne(newRecord.id)

        const result = await {{camelCase name}}Repo.save({
          ...{{camelCase name}},
          ...newRecord,
          updater: user
        })

        results.push({ ...result, cuFlag: 'M' })
      }
    }

    return results
  }

  @Directive('@transaction')
  @Mutation(returns => Boolean, { description: 'To delete {{pascalCase name}}' })
  async delete{{pascalCase name}}(@Arg('id') id: string, @Ctx() context: any): Promise<boolean> {
    const { domain, tx } = context.state

    await tx.getRepository({{pascalCase name}}).delete({ domain, id })
    return true
  }

  @Directive('@transaction')
  @Mutation(returns => Boolean, { description: 'To delete multiple {{camelCase name}}s' })
  async delete{{pluralPascalCase name}}(
    @Arg('ids', type => [String]) ids: string[],
    @Ctx() context: any
  ): Promise<boolean> {
    const { domain, tx } = context.state

    await tx.getRepository({{pascalCase name}}).delete({
      domain,
      id: In(ids)
    })

    return true
  }
}
